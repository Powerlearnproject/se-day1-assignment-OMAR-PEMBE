PART 1: INTRODUCTION TO SOFTWARE ENGINEERING

1. What is Software Engineering?
Software engineering is a systematic, disciplined, and quantifiable approach to the development, operation, and maintenance of software. It applies engineering principles to software creation to ensure that the product is reliable, efficient, and meets customer needs.
Importance 
A.) Software engineering is crucial because it ensures that software systems are built to be reliable, maintainable, and scalable. 
B.) It manage the complexity of software projects, reduces costs, and ensures high-quality products in the technology industry.

1.1 Key Milestones in the Evolution of Software Engineering:
1950s-1960s: Birth of Software Engineering: The concept of software engineering emerged as a response to the "software crisis" where large projects failed due to a lack of structured development methodologies.
1970s: Introduction of the Waterfall Model: The Waterfall model was one of the first structured software development methodologies, providing a sequential design process.
2001: Introduction of Agile Methodology: The Agile Manifesto was introduced, promoting adaptive planning, evolutionary development, early delivery, and continuous improvement.

1.2 Phases of the Software Development Life Cycle (SDLC):
Requirement Gathering: Understanding what the stakeholders need from the software.
Design: Planning the software architecture, interfaces, and data flow.
Implementation (Coding): Writing the code for the software according to the design.
Testing: Verifying that the software works as intended and is free of bugs.
Deployment: Releasing the software to users.
Maintenance: Updating the software to fix issues or add new features.

1.3 Waterfall vs. Agile Methodologies:
Waterfall Methodology:
Structure: Linear and sequential; each phase must be completed before the next begins. 
Example Scenario: Suitable for projects with well-defined requirements that are unlikely to change, such as government projects.
Agile Methodology:
Structure: Iterative and incremental; work is divided into small cycles called sprints.
Example Scenario: Suitable for projects with evolving requirements, such as software startups developing new products.

1.4 Roles and Responsibilities in a Software Engineering Team:
Software Developer: Writes and maintains the code, implements the design, and works on debugging and fixing issues.
Quality Assurance Engineer: Tests the software to ensure it meets the required standards and is free from bugs.
Project Manager: Manages the project timeline, resources, and communication among team members and stakeholders.

1.5 Importance of IDEs and VCS:
•	IDEs (Integrated Development Environments):
Importance: Provide a comprehensive environment for coding, debugging, and testing, improving developer productivity.
Examples: Visual Studio, IntelliJ IDEA.
•	VCS (Version Control Systems):
Importance: Allow multiple developers to collaborate on a project, track changes, and maintain different versions of the software.
Examples: Git, Subversion.

1.6 Common Challenges Faced by Software Engineers and Strategies to Overcome Them:
•	Challenge: Keeping up with rapidly evolving technology.
o	Strategy: Continuous learning through courses, workshops, and reading.
•	Challenge: Managing complex projects with tight deadlines.
o	Strategy: Break down tasks into smaller, manageable pieces and use project management tools.
•	Challenge: Debugging difficult issues.
o	Strategy: Use systematic approaches like dividing and conquering, and make use of debugging tools.

1.7 Types of Testing:
•	Unit Testing: Tests individual units or components of the software.
•	Integration Testing: Tests the interaction between integrated units or components.
•	System Testing: Tests the complete, integrated system to ensure it meets the requirements.
•	Acceptance Testing: Tests the software against the requirements and checks if it's ready for delivery.

PART 2: INTRODUCTION TO AI AND PROMPT ENGINEERING

2.0	Definition of Prompt Engineering:
Definition: Prompt engineering involves designing and refining prompts (input queries) to interact effectively with AI models, ensuring they produce accurate and relevant outputs.
Importance: Good prompt engineering ensures that AI models provide useful, actionable, and precise responses, making interactions with AI more efficient and effective.

2.1 Example of a Vague Prompt and Improvement:
Vague Prompt: "Tell me about the weather."
Improved Prompt: "Can you provide the weather forecast for Dar es Salaam for the next three days, including temperature, humidity, and chances of rain?"
Why It's More Effective: The improved prompt is specific, providing clear guidance to the AI on what information is needed, resulting in a more accurate and useful response.

